/*
*  Alvaro Ursua
* 'O Brien
* CS 236  
* 2/15/2019
* 
* This is the second window, supplements the main gui
* Use the passwordGui to run. loads all the phrases from the previous window, or can be 
* supplemented with some phrases replacing "phrases.dat"
* shows all phrases and adds a menu where symbols and numbers can be added. You can save thoes to a file
* then the bottom right field allows you to click back and forth to view all your hashed phrases or load phrases.
*
* Complied using NetBeans v9
 */
package passgame;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author alvaro
 */
public class passwordLoader extends javax.swing.JFrame {

    passwordStorage read = new passwordStorage();
    String[] passPhrases = read.fromFile;
    String[] numbers = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
    String[] symbol = {"!", "@", "#", "$", "%", "^", "&", "*", "+", "=", "?"};
    String[] userPhrase = new String[3];
    
    //array initalizes every spot in case the user generagtes less than 15 passphrases.
    String[] genUser = { " "," " ," " ," " ," " ," " ," " ," " ," " ," " , " ", " ", " ", " "," "};
    String userSeed = userPhrase[0] + userPhrase[1] + userPhrase[2];

    int counter = 0;
    int hashList = 0;

    /**
     * Creates new form passwordLoader
     */
    public passwordLoader() throws IOException {
        initComponents();
        passwordStorage read = new passwordStorage();
        read.readInwards();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        gameLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        loadPasswords = new javax.swing.JButton();
        saveToFile = new javax.swing.JButton();
        dispalyMade = new javax.swing.JLabel();
        displayHashed = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        generateUser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        phraseList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        numberList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        symbolList = new javax.swing.JList<>();
        displaySeed = new javax.swing.JTextField();
        nextButt = new javax.swing.JButton();
        backButt = new javax.swing.JButton();
        loadHash = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jPanel2.setBackground(new java.awt.Color(89, 89, 89));

        gameLabel.setFont(new java.awt.Font("Shree Devanagari 714", 0, 24)); // NOI18N
        gameLabel.setForeground(new java.awt.Color(204, 204, 204));
        gameLabel.setText("Password Manager");

        jLabel2.setText("This password Generator takes your phrases from the previous window ");

        jLabel3.setText("and allows you to customize them and save them to the file \"hashed.dat\"");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(gameLabel))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(801, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jLabel3))
        );

        loadPasswords.setText("Load Phrase File");
        loadPasswords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPasswordsActionPerformed(evt);
            }
        });

        saveToFile.setText("Save Passwords");
        saveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileActionPerformed(evt);
            }
        });

        dispalyMade.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        dispalyMade.setForeground(new java.awt.Color(238, 238, 238));
        dispalyMade.setText("Passphrases Made: 0  ");

        displayHashed.setText(" <Your Secure Passwords>");

        jLabel1.setFont(new java.awt.Font("Shree Devanagari 714", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Select a Phrase, Number and Symbol");

        generateUser.setText("Generate Password");
        generateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateUserActionPerformed(evt);
            }
        });

        phraseList.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return passPhrases.length; }
            public String getElementAt(int i) { return passPhrases[i]; }
        });
        phraseList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        phraseList.setFixedCellHeight(18);
        phraseList.setFixedCellWidth(25);
        jScrollPane1.setViewportView(phraseList);

        numberList.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return numbers.length; }
            public String getElementAt(int i) { return numbers[i]; }
        });
        numberList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(numberList);

        symbolList.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return symbol.length; }
            public String getElementAt(int i) { return symbol[i]; }
        });
        symbolList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane3.setViewportView(symbolList);

        displaySeed.setText("      <generate me>");
        displaySeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displaySeedActionPerformed(evt);
            }
        });

        nextButt.setText(">");
        nextButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtActionPerformed(evt);
            }
        });

        backButt.setText("<");
        backButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtActionPerformed(evt);
            }
        });

        loadHash.setText("Run Hashes");
        loadHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadHashActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(loadPasswords, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(saveToFile, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(displaySeed, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(6, 6, 6)
                                                    .addComponent(dispalyMade))
                                                .addComponent(generateUser))))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addGap(12, 12, 12)
                                            .addComponent(backButt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(loadHash, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(nextButt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addComponent(displayHashed, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadPasswords)
                            .addComponent(saveToFile)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(generateUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dispalyMade)
                        .addGap(12, 12, 12)
                        .addComponent(displaySeed, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(displayHashed, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loadHash)
                            .addComponent(backButt)
                            .addComponent(nextButt))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateUserActionPerformed

        //Combines every selected item to form a single string
        userPhrase[0] = passPhrases[phraseList.getSelectedIndex()];
        userPhrase[1] = numbers[numberList.getSelectedIndex()];
        userPhrase[2] = symbol[symbolList.getSelectedIndex()];

        userSeed = userPhrase[0] + userPhrase[1] + userPhrase[2];
        //prints to console to confirm that the seed was made
        displaySeed.setText(userSeed);

        //Limits the amount of phrases to 15
        if (counter < 15) {
            genUser[counter] = userSeed;
            System.out.println("phrase generated Success!");
        } else {
            System.out.println("WARNING! Array is full: No more phrases can be saved!");
        }
        counter++;
        dispalyMade.setText("Passphrases Made: " + counter);


    }//GEN-LAST:event_generateUserActionPerformed

    private void loadPasswordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPasswordsActionPerformed
        try {
            read.readInwards();
        } catch (IOException ex) {
            Logger.getLogger(passwordLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadPasswordsActionPerformed

    private void displaySeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displaySeedActionPerformed

    }//GEN-LAST:event_displaySeedActionPerformed

    private void saveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileActionPerformed
        runHasher();
        try {
            printOutwards();
        } catch (IOException ex) {
            Logger.getLogger(passwordLoader.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveToFileActionPerformed

    private void loadHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadHashActionPerformed
        try {
            read.readHashes();
        } catch (IOException ex) {
            Logger.getLogger(passwordLoader.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadHashActionPerformed

    private void backButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtActionPerformed

        //prevents array overflow
        if (hashList <= -1) {
            hashList = 0;
        }
        if (hashList >= 15) {
            hashList = 14;
        }

        displayHashed.setText(read.hashedPhrase[hashList]);

        //removes the move back button after the array end is met
        if (hashList == 0) {
            backButt.setText(" ");
        } else {
            backButt.setText("<");
        }
        hashList--;

        System.out.println(hashList);

    }//GEN-LAST:event_backButtActionPerformed

    private void nextButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtActionPerformed
        //prevents array overflow
        if (hashList <= -1) {
            hashList = 0;
        }
        if (hashList >= 15) {
            hashList = 14;
        }

        displayHashed.setText(read.hashedPhrase[hashList]);

        //removes the move forward signal on the button after aray end is full
        if (hashList == 14) {
            nextButt.setText(" ");
        } else {
            nextButt.setText(">");
        }

        hashList++;
        System.out.println(hashList);
    }//GEN-LAST:event_nextButtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(passwordLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(passwordLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(passwordLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(passwordLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    //This is a sexy little algorith.
    public void runHasher() {
        hasher hash = new hasher();
        for (int i = 0; i <= genUser.length - 1; i++) {
            if(genUser[i].equals(null) ){
            genUser[i] = "null";
            }
            hash.setSeed(genUser[i]);
            hash.runHash();
            genUser[i] = hash.getHash();
            
        }
        System.out.println("Passwords Hashed Successfully!");
    }

    public void printOutwards() throws IOException {
        FileOutputStream fileOut = new FileOutputStream("hashed.dat");
        ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);

        for (int i = 0; i <= genUser.length - 1; i++) {
            objectOut.writeObject(genUser[i]);
        }
        objectOut.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButt;
    private javax.swing.JLabel dispalyMade;
    private javax.swing.JTextField displayHashed;
    private javax.swing.JTextField displaySeed;
    private javax.swing.JLabel gameLabel;
    private javax.swing.JButton generateUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton loadHash;
    private javax.swing.JButton loadPasswords;
    private javax.swing.JButton nextButt;
    private javax.swing.JList<String> numberList;
    private javax.swing.JList<String> phraseList;
    private javax.swing.JButton saveToFile;
    private javax.swing.JList<String> symbolList;
    // End of variables declaration//GEN-END:variables
}
